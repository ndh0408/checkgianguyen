using System.Net;
using System.Net.Mail;
using GiaNguyenCheck.Interfaces;
using GiaNguyenCheck.Entities;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using GiaNguyenCheck.DTOs;
using System.Text;

namespace GiaNguyenCheck.Services
{
    /// <summary>
    /// Service ƒë·ªÉ g·ª≠i email
    /// </summary>
    public class EmailService : IEmailService
    {
        private readonly IConfiguration _configuration;
        private readonly ILogger<EmailService> _logger;
        private readonly SmtpClient _smtpClient;

        public EmailService(IConfiguration configuration, ILogger<EmailService> logger)
        {
            _configuration = configuration;
            _logger = logger;
            
            // C·∫•u h√¨nh SMTP client
            _smtpClient = new SmtpClient
            {
                Host = _configuration["EmailSettings:Host"] ?? "smtp.gmail.com",
                Port = int.Parse(_configuration["EmailSettings:Port"] ?? "587"),
                EnableSsl = bool.Parse(_configuration["EmailSettings:EnableSsl"] ?? "true"),
                UseDefaultCredentials = false,
                Credentials = new NetworkCredential(
                    _configuration["EmailSettings:Username"] ?? "",
                    _configuration["EmailSettings:Password"] ?? ""
                )
            };
        }

        /// <summary>
        /// G·ª≠i email ƒë∆°n gi·∫£n
        /// </summary>
        public async Task<bool> SendEmailAsync(string to, string subject, string body, bool isHtml = true)
        {
            try
            {
                var from = _configuration["EmailSettings:FromEmail"] ?? "noreply@gianguyencheck.com";
                var fromName = _configuration["EmailSettings:FromName"] ?? "GiaNguyenCheck";

                using var message = new MailMessage();
                message.From = new MailAddress(from, fromName);
                message.To.Add(to);
                message.Subject = subject;
                message.Body = body;
                message.IsBodyHtml = isHtml;

                await _smtpClient.SendMailAsync(message);
                
                _logger.LogInformation("Email sent successfully to {Email}", to);
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send email to {Email}", to);
                return false;
            }
        }

        // Interface methods implementation
        public async Task<bool> SendInvitationEmailAsync(Invitation invitation, string tenantName)
        {
            var subject = $"M·ªùi tham gia h·ªá th·ªëng {tenantName}";
            var body = GenerateInvitationEmailTemplate(invitation, tenantName);
            
            return await SendEmailAsync(invitation.Email, subject, body);
        }

        public async Task<bool> SendWelcomeEmailAsync(User user, string tenantName)
        {
            var subject = $"Ch√†o m·ª´ng ƒë·∫øn v·ªõi {tenantName}";
            var body = GenerateWelcomeEmailTemplate(user, tenantName);
            
            return await SendEmailAsync(user.Email, subject, body);
        }

        public async Task<bool> SendPasswordResetEmailAsync(User user, string resetToken)
        {
            var subject = "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u";
            var resetUrl = $"{_configuration["AppUrl"]}/auth/reset-password?token={resetToken}";
            var body = GeneratePasswordResetTemplate(user, resetUrl);
            
            return await SendEmailAsync(user.Email, subject, body);
        }

        public async Task<bool> SendPaymentSuccessEmailAsync(Tenant tenant, Payment payment)
        {
            // G·ª≠i email x√°c nh·∫≠n thanh to√°n (mock)
            return await Task.FromResult(true);
        }

        public async Task<bool> SendEventReminderEmailAsync(Guest guest, Event eventEntity)
        {
            var subject = $"Nh·∫Øc nh·ªü: S·ª± ki·ªán {eventEntity.Name} s·∫Øp di·ªÖn ra";
            var body = GenerateEventReminderTemplate(guest, eventEntity);
            
            return await SendEmailAsync(guest.Email, subject, body);
        }

        public async Task<bool> SendBulkInvitationsAsync(IEnumerable<Guest> guests)
        {
            // G·ª≠i email h√†ng lo·∫°t (mock)
            return await Task.FromResult(true);
        }

        /// <summary>
        /// G·ª≠i email m·ªùi tham gia s·ª± ki·ªán
        /// </summary>
        public async Task<bool> SendEventInvitationAsync(string to, string guestName, string eventName, 
            string eventDetails, string qrCodeUrl, string eventUrl)
        {
            var subject = $"Th∆∞ m·ªùi tham gia s·ª± ki·ªán: {eventName}";
            
            var body = $@"
                <html>
                <head>
                    <style>
                        body {{ font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }}
                        .container {{ max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                        .header {{ text-align: center; margin-bottom: 30px; }}
                        .logo {{ font-size: 24px; font-weight: bold; color: #667eea; }}
                        .event-details {{ background-color: #f8f9ff; padding: 20px; border-radius: 8px; margin: 20px 0; }}
                        .qr-code {{ text-align: center; margin: 30px 0; }}
                        .qr-code img {{ max-width: 200px; }}
                        .button {{ display: inline-block; background-color: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }}
                        .footer {{ text-align: center; margin-top: 30px; font-size: 12px; color: #666; }}
                    </style>
                </head>
                <body>
                    <div class='container'>
                        <div class='header'>
                            <div class='logo'>üéâ GiaNguyenCheck</div>
                            <h1>Th∆∞ m·ªùi tham gia s·ª± ki·ªán</h1>
                        </div>
                        
                        <p>Xin ch√†o <strong>{guestName}</strong>,</p>
                        
                        <p>B·∫°n ƒë∆∞·ª£c m·ªùi tham gia s·ª± ki·ªán <strong>{eventName}</strong>. Ch√∫ng t√¥i r·∫•t vui m·ª´ng ƒë∆∞·ª£c ƒë√≥n ti·∫øp b·∫°n!</p>
                        
                        <div class='event-details'>
                            <h3>üìã Th√¥ng tin s·ª± ki·ªán:</h3>
                            <p>{eventDetails}</p>
                        </div>
                        
                        <div class='qr-code'>
                            <h3>üì± M√£ QR check-in:</h3>
                            <p>Vui l√≤ng l∆∞u m√£ QR n√†y ƒë·ªÉ check-in nhanh ch√≥ng t·∫°i s·ª± ki·ªán:</p>
                            <img src='{qrCodeUrl}' alt='QR Code' />
                            <p><small>Ho·∫∑c s·ª≠ d·ª•ng link: <a href='{eventUrl}'>Check-in tr·ª±c tuy·∫øn</a></small></p>
                        </div>
                        
                        <div style='text-align: center;'>
                            <a href='{eventUrl}' class='button'>Xem chi ti·∫øt s·ª± ki·ªán</a>
                        </div>
                        
                        <div class='footer'>
                            <p>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng GiaNguyenCheck!</p>
                            <p>N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá: support@gianguyencheck.com</p>
                        </div>
                    </div>
                </body>
                </html>";

            return await SendEmailAsync(to, subject, body, true);
        }

        /// <summary>
        /// G·ª≠i email x√°c nh·∫≠n ƒëƒÉng k√Ω
        /// </summary>
        public async Task<bool> SendRegistrationConfirmationAsync(string to, string userName, string confirmationUrl)
        {
            var subject = "X√°c nh·∫≠n ƒëƒÉng k√Ω t√†i kho·∫£n GiaNguyenCheck";
            
            var body = $@"
                <html>
                <body style='font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5;'>
                    <div style='max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);'>
                        <div style='text-align: center; margin-bottom: 30px;'>
                            <h1 style='color: #667eea;'>üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi GiaNguyenCheck!</h1>
                        </div>
                        
                        <p>Xin ch√†o <strong>{userName}</strong>,</p>
                        
                        <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n GiaNguyenCheck. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng click v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ x√°c nh·∫≠n email:</p>
                        
                        <div style='text-align: center; margin: 30px 0;'>
                            <a href='{confirmationUrl}' style='display: inline-block; background-color: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px;'>X√°c nh·∫≠n email</a>
                        </div>
                        
                        <p>Ho·∫∑c copy link sau v√†o tr√¨nh duy·ªát:</p>
                        <p style='word-break: break-all; background-color: #f8f9ff; padding: 10px; border-radius: 5px;'>{confirmationUrl}</p>
                        
                        <div style='text-align: center; margin-top: 30px; font-size: 12px; color: #666;'>
                            <p>N·∫øu b·∫°n kh√¥ng ƒëƒÉng k√Ω t√†i kho·∫£n n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
                            <p>GiaNguyenCheck Team</p>
                        </div>
                    </div>
                </body>
                </html>";

            return await SendEmailAsync(to, subject, body, true);
        }

        /// <summary>
        /// G·ª≠i email reset password
        /// </summary>
        public async Task<bool> SendPasswordResetAsync(string to, string userName, string resetUrl)
        {
            var subject = "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u GiaNguyenCheck";
            
            var body = $@"
                <html>
                <body style='font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5;'>
                    <div style='max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);'>
                        <div style='text-align: center; margin-bottom: 30px;'>
                            <h1 style='color: #667eea;'>üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
                        </div>
                        
                        <p>Xin ch√†o <strong>{userName}</strong>,</p>
                        
                        <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n. Click v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t·∫°o m·∫≠t kh·∫©u m·ªõi:</p>
                        
                        <div style='text-align: center; margin: 30px 0;'>
                            <a href='{resetUrl}' style='display: inline-block; background-color: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px;'>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
                        </div>
                        
                        <p>Ho·∫∑c copy link sau v√†o tr√¨nh duy·ªát:</p>
                        <p style='word-break: break-all; background-color: #f8f9ff; padding: 10px; border-radius: 5px;'>{resetUrl}</p>
                        
                        <p><strong>L∆∞u √Ω:</strong> Link n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù v√¨ l√Ω do b·∫£o m·∫≠t.</p>
                        
                        <div style='text-align: center; margin-top: 30px; font-size: 12px; color: #666;'>
                            <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.</p>
                            <p>GiaNguyenCheck Team</p>
                        </div>
                    </div>
                </body>
                </html>";

            return await SendEmailAsync(to, subject, body, true);
        }

        /// <summary>
        /// G·ª≠i th√¥ng b√°o check-in th√†nh c√¥ng
        /// </summary>
        public async Task<bool> SendCheckInNotificationAsync(string to, string guestName, string eventName, DateTime checkInTime)
        {
            var subject = $"Check-in th√†nh c√¥ng - {eventName}";
            var body = $@"
                <html>
                <body style='font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5;'>
                    <div style='max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);'>
                        <div style='text-align: center; margin-bottom: 30px;'>
                            <h1 style='color: #28a745;'>‚úÖ Check-in th√†nh c√¥ng!</h1>
                        </div>
                        
                        <p>Xin ch√†o <strong>{guestName}</strong>,</p>
                        
                        <p>B·∫°n ƒë√£ check-in th√†nh c√¥ng v√†o s·ª± ki·ªán <strong>{eventName}</strong> l√∫c {checkInTime:HH:mm} ng√†y {checkInTime:dd/MM/yyyy}.</p>
                        
                        <div style='background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 5px; padding: 15px; margin: 20px 0;'>
                            <h3 style='color: #155724; margin-top: 0;'>Th√¥ng tin check-in:</h3>
                            <p><strong>S·ª± ki·ªán:</strong> {eventName}</p>
                            <p><strong>Th·ªùi gian check-in:</strong> {checkInTime:dd/MM/yyyy HH:mm:ss}</p>
                            <p><strong>Tr·∫°ng th√°i:</strong> ƒê√£ tham gia</p>
                        </div>
                        
                        <p>Ch√∫c b·∫°n c√≥ m·ªôt s·ª± ki·ªán tuy·ªát v·ªùi!</p>
                        
                        <div style='text-align: center; margin-top: 30px; font-size: 12px; color: #666;'>
                            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng GiaNguyenCheck</p>
                        </div>
                    </div>
                </body>
                </html>";

            return await SendEmailAsync(to, subject, body, true);
        }

        /// <summary>
        /// G·ª≠i email bulk v·ªõi template
        /// </summary>
        public async Task<List<bool>> SendBulkEmailAsync(List<string> recipients, string subject, string bodyTemplate, Dictionary<string, string>? placeholders = null)
        {
            var results = new List<bool>();

            foreach (var recipient in recipients)
            {
                var personalizedBody = bodyTemplate;
                
                // Replace placeholders if provided
                if (placeholders != null)
                {
                    foreach (var placeholder in placeholders)
                    {
                        personalizedBody = personalizedBody.Replace($"{{{placeholder.Key}}}", placeholder.Value);
                    }
                }

                var success = await SendEmailAsync(recipient, subject, personalizedBody, true);
                results.Add(success);

                // Small delay to avoid overwhelming SMTP server
                await Task.Delay(100);
            }

            return results;
        }

        /// <summary>
        /// Dispose SMTP client
        /// </summary>
        public void Dispose()
        {
            _smtpClient?.Dispose();
        }

        private string GenerateInvitationEmailTemplate(Invitation invitation, string tenantName)
        {
            var appUrl = _configuration["AppUrl"];
            var registerUrl = $"{appUrl}/auth/register?code={invitation.Code}";

            return $@"
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset='utf-8'>
                    <title>M·ªùi tham gia {tenantName}</title>
                    <style>
                        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                        .header {{ background-color: #007bff; color: white; padding: 20px; text-align: center; }}
                        .content {{ padding: 20px; background-color: #f8f9fa; }}
                        .button {{ display: inline-block; padding: 12px 24px; background-color: #007bff; color: white; text-decoration: none; border-radius: 5px; }}
                        .footer {{ text-align: center; padding: 20px; color: #666; font-size: 12px; }}
                    </style>
                </head>
                <body>
                    <div class='container'>
                        <div class='header'>
                            <h1>M·ªùi tham gia {tenantName}</h1>
                        </div>
                        <div class='content'>
                            <p>Xin ch√†o,</p>
                            <p>B·∫°n ƒë√£ ƒë∆∞·ª£c m·ªùi tham gia h·ªá th·ªëng qu·∫£n l√Ω s·ª± ki·ªán <strong>{tenantName}</strong>.</p>
                            <p>Vui l√≤ng s·ª≠ d·ª•ng m√£ m·ªùi sau ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n:</p>
                            <h2 style='text-align: center; color: #007bff; font-size: 24px;'>{invitation.Code}</h2>
                            <p style='text-align: center;'>
                                <a href='{registerUrl}' class='button'>ƒêƒÉng k√Ω ngay</a>
                            </p>
                            <p><strong>L∆∞u √Ω:</strong></p>
                            <ul>
                                <li>M√£ m·ªùi n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong {invitation.ExpiresAt:dd/MM/yyyy HH:mm}</li>
                                <li>M·ªói m√£ m·ªùi ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng m·ªôt l·∫ßn</li>
                                <li>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán ƒëƒÉng k√Ω, m√£ m·ªùi s·∫Ω t·ª± ƒë·ªông h·∫øt h·∫°n</li>
                            </ul>
                        </div>
                        <div class='footer'>
                            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng {tenantName}</p>
                            <p>Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y</p>
                        </div>
                    </div>
                </body>
                </html>";
        }

        private string GenerateEventReminderTemplate(Guest guest, Event eventEntity)
        {
            return $@"
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset='utf-8'>
                    <title>Nh·∫Øc nh·ªü s·ª± ki·ªán</title>
                    <style>
                        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                        .header {{ background-color: #28a745; color: white; padding: 20px; text-align: center; }}
                        .content {{ padding: 20px; background-color: #f8f9fa; }}
                        .event-info {{ background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0; }}
                        .footer {{ text-align: center; padding: 20px; color: #666; font-size: 12px; }}
                    </style>
                </head>
                <body>
                    <div class='container'>
                        <div class='header'>
                            <h1>Nh·∫Øc nh·ªü s·ª± ki·ªán</h1>
                        </div>
                        <div class='content'>
                            <p>Xin ch√†o <strong>{guest.FullName}</strong>,</p>
                            <p>S·ª± ki·ªán <strong>{eventEntity.Name}</strong> s·∫Ω di·ªÖn ra trong th·ªùi gian s·∫Øp t·ªõi.</p>
                            
                            <div class='event-info'>
                                <h3>Th√¥ng tin s·ª± ki·ªán:</h3>
                                <p><strong>T√™n s·ª± ki·ªán:</strong> {eventEntity.Name}</p>
                                <p><strong>Th·ªùi gian:</strong> {eventEntity.StartTime:dd/MM/yyyy HH:mm} - {eventEntity.EndTime:dd/MM/yyyy HH:mm}</p>
                                <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> {eventEntity.Location}</p>
                                <p><strong>M√¥ t·∫£:</strong> {eventEntity.Description}</p>
                            </div>
                            
                            <p>Vui l√≤ng ƒë·∫£m b·∫£o b·∫°n c√≥ m·∫∑t ƒë√∫ng gi·ªù v√† mang theo th√¥ng tin c√° nh√¢n ƒë·ªÉ check-in.</p>
                            <p>Tr√¢n tr·ªçng,<br>Ban t·ªï ch·ª©c</p>
                        </div>
                        <div class='footer'>
                            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng qu·∫£n l√Ω s·ª± ki·ªán</p>
                        </div>
                    </div>
                </body>
                </html>";
        }

        private string GenerateWelcomeEmailTemplate(User user, string tenantName)
        {
            return $@"
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset='utf-8'>
                    <title>Ch√†o m·ª´ng</title>
                    <style>
                        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                        .header {{ background-color: #007bff; color: white; padding: 20px; text-align: center; }}
                        .content {{ padding: 20px; background-color: #f8f9fa; }}
                        .footer {{ text-align: center; padding: 20px; color: #666; font-size: 12px; }}
                    </style>
                </head>
                <body>
                    <div class='container'>
                        <div class='header'>
                            <h1>Ch√†o m·ª´ng ƒë·∫øn v·ªõi {tenantName}</h1>
                        </div>
                        <div class='content'>
                            <p>Xin ch√†o <strong>{user.FullName}</strong>,</p>
                            <p>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng qu·∫£n l√Ω s·ª± ki·ªán <strong>{tenantName}</strong>!</p>
                            <p>T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi:</p>
                            <ul>
                                <li><strong>Email:</strong> {user.Email}</li>
                                <li><strong>Vai tr√≤:</strong> {user.Role}</li>
                            </ul>
                            <p>B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng h·ªá th·ªëng ngay b√¢y gi·ªù ƒë·ªÉ:</p>
                            <ul>
                                <li>T·∫°o v√† qu·∫£n l√Ω s·ª± ki·ªán</li>
                                <li>Qu·∫£n l√Ω danh s√°ch kh√°ch m·ªùi</li>
                                <li>Theo d√µi check-in real-time</li>
                                <li>Xem b√°o c√°o v√† th·ªëng k√™</li>
                            </ul>
                            <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá v·ªõi qu·∫£n tr·ªã vi√™n h·ªá th·ªëng.</p>
                            <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© {tenantName}</p>
                        </div>
                        <div class='footer'>
                            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng {tenantName}</p>
                        </div>
                    </div>
                </body>
                </html>";
        }

        private string GeneratePasswordResetTemplate(User user, string resetUrl)
        {
            return $@"
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset='utf-8'>
                    <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</title>
                    <style>
                        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                        .header {{ background-color: #dc3545; color: white; padding: 20px; text-align: center; }}
                        .content {{ padding: 20px; background-color: #f8f9fa; }}
                        .button {{ display: inline-block; padding: 12px 24px; background-color: #dc3545; color: white; text-decoration: none; border-radius: 5px; }}
                        .footer {{ text-align: center; padding: 20px; color: #666; font-size: 12px; }}
                    </style>
                </head>
                <body>
                    <div class='container'>
                        <div class='header'>
                            <h1>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
                        </div>
                        <div class='content'>
                            <p>Xin ch√†o <strong>{user.FullName}</strong>,</p>
                            <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n.</p>
                            <p style='text-align: center;'>
                                <a href='{resetUrl}' class='button'>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
                            </p>
                            <p><strong>L∆∞u √Ω:</strong></p>
                            <ul>
                                <li>Link n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong 1 gi·ªù</li>
                                <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y</li>
                                <li>ƒê·ªÉ b·∫£o m·∫≠t, vui l√≤ng kh√¥ng chia s·∫ª link n√†y v·ªõi ng∆∞·ªùi kh√°c</li>
                            </ul>
                            <p>N·∫øu b·∫°n g·∫∑p v·∫•n ƒë·ªÅ, vui l√≤ng li√™n h·ªá v·ªõi qu·∫£n tr·ªã vi√™n h·ªá th·ªëng.</p>
                        </div>
                        <div class='footer'>
                            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng qu·∫£n l√Ω s·ª± ki·ªán</p>
                            <p>Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y</p>
                        </div>
                    </div>
                </body>
                </html>";
        }

        private string GeneratePaymentConfirmationTemplate(EventPayment payment, Guest guest, Event eventEntity)
        {
            return $@"
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset='utf-8'>
                    <title>X√°c nh·∫≠n thanh to√°n</title>
                    <style>
                        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                        .header {{ background-color: #28a745; color: white; padding: 20px; text-align: center; }}
                        .content {{ padding: 20px; background-color: #f8f9fa; }}
                        .payment-info {{ background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0; }}
                        .footer {{ text-align: center; padding: 20px; color: #666; font-size: 12px; }}
                    </style>
                </head>
                <body>
                    <div class='container'>
                        <div class='header'>
                            <h1>X√°c nh·∫≠n thanh to√°n</h1>
                        </div>
                        <div class='content'>
                            <p>Xin ch√†o <strong>{guest.FullName}</strong>,</p>
                            <p>Ch√∫ng t√¥i x√°c nh·∫≠n ƒë√£ nh·∫≠n ƒë∆∞·ª£c thanh to√°n c·ªßa b·∫°n cho s·ª± ki·ªán <strong>{eventEntity.Name}</strong>.</p>
                            
                            <div class='payment-info'>
                                <h3>Th√¥ng tin thanh to√°n:</h3>
                                <p><strong>M√£ thanh to√°n:</strong> {payment.Id}</p>
                                <p><strong>S·ªë ti·ªÅn:</strong> {payment.Amount:N0} {payment.Currency}</p>
                                <p><strong>Ph∆∞∆°ng th·ª©c:</strong> {payment.PaymentMethod}</p>
                                <p><strong>Tr·∫°ng th√°i:</strong> {payment.Status}</p>
                                <p><strong>Th·ªùi gian:</strong> {payment.PaidAt:dd/MM/yyyy HH:mm}</p>
                            </div>
                            
                            <div class='payment-info'>
                                <h3>Th√¥ng tin s·ª± ki·ªán:</h3>
                                <p><strong>T√™n s·ª± ki·ªán:</strong> {eventEntity.Name}</p>
                                <p><strong>Th·ªùi gian:</strong> {eventEntity.StartTime:dd/MM/yyyy HH:mm} - {eventEntity.EndTime:dd/MM/yyyy HH:mm}</p>
                                <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> {eventEntity.Location}</p>
                            </div>
                            
                            <p>C·∫£m ∆°n b·∫°n ƒë√£ tham gia s·ª± ki·ªán c·ªßa ch√∫ng t√¥i!</p>
                        </div>
                        <div class='footer'>
                            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng qu·∫£n l√Ω s·ª± ki·ªán</p>
                        </div>
                    </div>
                </body>
                </html>";
        }

        private string GenerateCheckInConfirmationTemplate(CheckIn checkIn, Guest guest, Event eventEntity)
        {
            return $@"
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset='utf-8'>
                    <title>X√°c nh·∫≠n Check-in</title>
                    <style>
                        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                        .header {{ background-color: #17a2b8; color: white; padding: 20px; text-align: center; }}
                        .content {{ padding: 20px; background-color: #f8f9fa; }}
                        .checkin-info {{ background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0; }}
                        .footer {{ text-align: center; padding: 20px; color: #666; font-size: 12px; }}
                    </style>
                </head>
                <body>
                    <div class='container'>
                        <div class='header'>
                            <h1>X√°c nh·∫≠n Check-in th√†nh c√¥ng</h1>
                        </div>
                        <div class='content'>
                            <p>Xin ch√†o <strong>{guest.FullName}</strong>,</p>
                            <p>B·∫°n ƒë√£ check-in th√†nh c√¥ng v√†o s·ª± ki·ªán <strong>{eventEntity.Name}</strong>.</p>
                            
                            <div class='checkin-info'>
                                <h3>Th√¥ng tin Check-in:</h3>
                                <p><strong>Th·ªùi gian check-in:</strong> {checkIn.CheckInTime:dd/MM/yyyy HH:mm:ss}</p>
                                <p><strong>Ph∆∞∆°ng th·ª©c:</strong> {checkIn.Type}</p>
                                <p><strong>Ng∆∞·ªùi th·ª±c hi·ªán:</strong> {checkIn.CheckedInByUserId}</p>
                            </div>
                            
                            <div class='checkin-info'>
                                <h3>Th√¥ng tin s·ª± ki·ªán:</h3>
                                <p><strong>T√™n s·ª± ki·ªán:</strong> {eventEntity.Name}</p>
                                <p><strong>Th·ªùi gian:</strong> {eventEntity.StartTime:dd/MM/yyyy HH:mm} - {eventEntity.EndTime:dd/MM/yyyy HH:mm}</p>
                                <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> {eventEntity.Location}</p>
                            </div>
                            
                            <p>Ch√∫c b·∫°n c√≥ m·ªôt s·ª± ki·ªán tuy·ªát v·ªùi!</p>
                        </div>
                        <div class='footer'>
                            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng qu·∫£n l√Ω s·ª± ki·ªán</p>
                        </div>
                    </div>
                </body>
                </html>";
        }

        public async Task<bool> SendPaymentConfirmationEmailAsync(EventPayment payment, Guest guest, Event eventEntity)
        {
            var subject = $"X√°c nh·∫≠n thanh to√°n - S·ª± ki·ªán {eventEntity.Name}";
            var body = GeneratePaymentConfirmationTemplate(payment, guest, eventEntity);
            
            return await SendEmailAsync(guest.Email, subject, body);
        }

        public async Task<bool> SendCheckInConfirmationEmailAsync(CheckIn checkIn, Guest guest, Event eventEntity)
        {
            var subject = $"X√°c nh·∫≠n Check-in - S·ª± ki·ªán {eventEntity.Name}";
            var body = GenerateCheckInConfirmationTemplate(checkIn, guest, eventEntity);
            
            return await SendEmailAsync(guest.Email, subject, body);
        }
    }
} 